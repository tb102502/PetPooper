--[[
    FIXED GameCore.lua - Added Missing Cow Methods
    
    FIXES:
    ‚úÖ Added missing GetCowConfiguration method
    ‚úÖ Added missing PurchaseCow method
    ‚úÖ Added comprehensive cow management system
    ‚úÖ Fixed all method references from other scripts
    ‚úÖ Enhanced cow placement and management
]]

local GameCore = {}

-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local ServerStorage = game:GetService("ServerStorage")
local DataStoreService = game:GetService("DataStoreService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local Debris = game:GetService("Debris")

-- Load configuration
local ItemConfig = require(game:GetService("ReplicatedStorage"):WaitForChild("ItemConfig"))
local remoteFolder = ReplicatedStorage:FindFirstChild("GameRemotes")
if not remoteFolder then
	remoteFolder = Instance.new("Folder")
	remoteFolder.Name = "GameRemotes"
	remoteFolder.Parent = ReplicatedStorage
end

-- FARM PLOT POSITION CONFIGURATION
GameCore.FarmPlotPositions = {
	basePosition = Vector3.new(-366.118, -2.793, 75.731),
	plotOffsets = {
		[1] = Vector3.new(0, 0, 0),
		[2] = Vector3.new(-34.65, 0, 0),
		[3] = Vector3.new(0, 0, 33.8),
		[4] = Vector3.new(-34.65, 0, 33.65),
		[5] = Vector3.new(-34.65, 0, 66.95),
		[6] = Vector3.new(0, 0, 66.95),
		[7] = Vector3.new(0, 0, 100.75),
		[8] = Vector3.new(-34.65, 0, 100.6),
	},
	plotRotation = Vector3.new(0, 0, 0),
	playerSeparation = Vector3.new(120, 0, 0)
}

-- COW SYSTEM CONFIGURATION
GameCore.CowConfigurations = {
	basic_cow = {
		tier = "basic",
		milkAmount = 2,
		cooldown = 10,
		visualEffects = {},
		maxCows = 1,
		price = 0,
		currency = "coins",
		requirements = {},
		modelName = "BasicCow",
		size = Vector3.new(4, 4, 6),
		color = Color3.fromRGB(139, 69, 19)
	},
	extra_basic_cow = {
		tier = "basic",
		milkAmount = 2,
		cooldown = 10,
		visualEffects = {},
		maxCows = 5,
		price = 1000,
		currency = "coins",
		requirements = {"basic_cow"},
		modelName = "BasicCow",
		size = Vector3.new(4, 4, 6),
		color = Color3.fromRGB(139, 69, 19)
	},
	silver_cow_upgrade = {
		tier = "silver",
		milkAmount = 3,
		cooldown = 30,
		visualEffects = {"metallic_shine", "silver_particles"},
		upgradeFrom = "basic",
		price = 10000,
		currency = "coins",
		requirements = {"basic_cow"},
		modelName = "SilverCow",
		size = Vector3.new(4.2, 4.2, 6.2),
		color = Color3.fromRGB(192, 192, 192)
	},
	gold_cow_upgrade = {
		tier = "gold",
		milkAmount = 4,
		cooldown = 60,
		visualEffects = {"golden_glow", "gold_sparkles", "light_aura"},
		upgradeFrom = "silver",
		price = 25000,
		currency = "coins",
		requirements = {"silver_cow_upgrade"},
		modelName = "GoldCow",
		size = Vector3.new(4.5, 4.5, 6.5),
		color = Color3.fromRGB(255, 215, 0)
	}
}

-- COW POSITIONS (relative to farm)
GameCore.CowPositions = {
	[1] = Vector3.new(-10, 0, 10),
	[2] = Vector3.new(-10, 0, -10),
	[3] = Vector3.new(10, 0, 10),
	[4] = Vector3.new(10, 0, -10),
	[5] = Vector3.new(0, 0, 15)
}

-- Core Data Management
GameCore.PlayerData = {}
GameCore.RemoteEvents = {}
GameCore.RemoteFunctions = {}
GameCore.DataStoreCooldowns = {}
GameCore.SAVE_COOLDOWN = 60
GameCore.STUDIO_MODE = game:GetService("RunService"):IsStudio()

-- System States
GameCore.Systems = {
	Livestock = {
		CowCooldowns = {},
		PigStates = {}
	},
	Farming = {
		PlayerFarms = {},
		GrowthTimers = {},
		RarityEffects = {}
	}
}

-- Workspace Models
GameCore.Models = {
	Cow = nil,
	Pig = nil
}

-- Reference to ShopSystem (will be injected)
GameCore.ShopSystem = nil

-- ========== INITIALIZATION ==========

function GameCore:Initialize(shopSystem)
	print("GameCore: Starting FIXED initialization with complete cow system...")

	-- Store ShopSystem reference
	if shopSystem then
		self.ShopSystem = shopSystem
		print("GameCore: ShopSystem reference established")
	end

	-- Initialize DataStore
	self:InitializeDataStore()

	-- Initialize player data storage
	self.PlayerData = {}
	self.DataStoreCooldowns = {}

	-- Setup remote connections
	self:SetupRemoteConnections()

	-- Setup event handlers
	self:SetupEventHandlers()

	-- Initialize game systems
	self:InitializeLivestockSystem()
	self:InitializeFarmingSystem()

	-- Start update loops
	self:StartUpdateLoops()

	print("GameCore: ‚úÖ FIXED initialization with complete cow system!")
	return true
end

function GameCore:InitializeDataStore()
	local success, dataStore = pcall(function()
		return DataStoreService:GetDataStore("LivestockFarmData_v4")
	end)

	if success then
		self.PlayerDataStore = dataStore
		print("‚úÖ GameCore: DataStore connected successfully")
		return true
	else
		warn("‚ùå GameCore: Failed to connect to DataStore: " .. tostring(dataStore))
		self.PlayerDataStore = nil
		return false
	end
end

-- ========== COW SYSTEM METHODS (MISSING METHODS ADDED) ==========

function GameCore:GetCowConfiguration(cowItemId)
	print("üêÑ GameCore: Getting cow configuration for " .. cowItemId)

	local config = self.CowConfigurations[cowItemId]
	if config then
		print("‚úÖ Found cow configuration for " .. cowItemId)
		return config
	end

	-- Try to get from ItemConfig as fallback
	if self.ItemConfig and self.ItemConfig.ShopItems and self.ItemConfig.ShopItems[cowItemId] then
		local shopItem = self.ItemConfig.ShopItems[cowItemId]
		if shopItem.cowData then
			print("‚úÖ Found cow configuration in ItemConfig for " .. cowItemId)
			return shopItem.cowData
		end
	end

	warn("‚ùå No cow configuration found for " .. cowItemId)
	return nil
end

function GameCore:PurchaseCow(player, cowItemId, position)
	print("üêÑ GameCore: Processing cow purchase - " .. player.Name .. " buying " .. cowItemId)

	-- Get player data
	local playerData = self:GetPlayerData(player)
	if not playerData then
		warn("üêÑ No player data found for " .. player.Name)
		return false
	end

	-- Get cow configuration
	local cowConfig = self:GetCowConfiguration(cowItemId)
	if not cowConfig then
		self:SendNotification(player, "Invalid Cow", "Cow configuration not found!", "error")
		return false
	end

	-- Initialize livestock data
	if not playerData.livestock then
		playerData.livestock = {cows = {}, pig = {}, inventory = {}}
	end
	if not playerData.livestock.cows then
		playerData.livestock.cows = {}
	end

	-- Check requirements
	if not self:CheckCowRequirements(player, playerData, cowConfig) then
		return false
	end

	-- Check farm plot requirement
	if not playerData.farming or not playerData.farming.plots or playerData.farming.plots <= 0 then
		self:SendNotification(player, "No Farm", "You need a farm plot first! Buy one from the shop.", "error")
		return false
	end

	-- Check cow limit
	local currentCowCount = 0
	for _ in pairs(playerData.livestock.cows) do
		currentCowCount = currentCowCount + 1
	end

	local maxCows = cowConfig.maxCows or 1
	if currentCowCount >= maxCows then
		self:SendNotification(player, "Cow Limit", "You already have the maximum number of cows for this tier!", "error")
		return false
	end

	-- Create cow
	local success, cowModel = self:CreateCowModel(player, cowItemId, cowConfig, position)
	if not success then
		self:SendNotification(player, "Cow Creation Failed", "Could not create cow model!", "error")
		return false
	end

	-- Add to player data
	local cowId = HttpService:GenerateGUID(false)
	playerData.livestock.cows[cowId] = {
		id = cowId,
		type = cowItemId,
		tier = cowConfig.tier,
		purchaseTime = os.time(),
		lastMilkCollection = 0,
		totalMilkProduced = 0,
		position = cowModel and cowModel.PrimaryPart and cowModel.PrimaryPart.Position or Vector3.new(0, 0, 0),
		health = 100,
		happiness = 100
	}

	-- Save data
	self:SavePlayerData(player)

	-- Notify success
	self:SendNotification(player, "üêÑ Cow Added!", 
		"Successfully added " .. (cowConfig.tier or "basic") .. " cow to your farm!", "success")

	-- Apply visual effects if available
	if cowModel and _G.CowVisualEffects then
		spawn(function()
			wait(1) -- Wait for model to fully load
			_G.CowVisualEffects:ApplyAdvancedEffects(cowModel, cowConfig.tier)
		end)
	end

	print("üêÑ Successfully created cow " .. cowId .. " for " .. player.Name)
	return true
end

function GameCore:CheckCowRequirements(player, playerData, cowConfig)
	-- Check purchase history requirements
	if cowConfig.requirements then
		for _, requiredItem in ipairs(cowConfig.requirements) do
			if not playerData.purchaseHistory or not playerData.purchaseHistory[requiredItem] then
				local reqName = requiredItem:gsub("_", " "):gsub("(%l)(%w*)", function(a,b) return string.upper(a)..b end)
				self:SendNotification(player, "Requirements Not Met", 
					"You need to purchase " .. reqName .. " first!", "error")
				return false
			end
		end
	end

	-- Check if this is an upgrade
	if cowConfig.upgradeFrom then
		local hasBaseType = false
		for _, cowData in pairs(playerData.livestock.cows) do
			if cowData.tier == cowConfig.upgradeFrom then
				hasBaseType = true
				break
			end
		end

		if not hasBaseType then
			self:SendNotification(player, "No Cow to Upgrade", 
				"You need a " .. cowConfig.upgradeFrom .. " cow to upgrade!", "error")
			return false
		end
	end

	return true
end

function GameCore:CreateCowModel(player, cowItemId, cowConfig, specificPosition)
	print("üêÑ Creating cow model for " .. player.Name)

	local success, result = pcall(function()
		-- Get player's farm area
		local playerFarm = self:GetPlayerFarmArea(player)
		if not playerFarm then
			error("Player farm not found")
		end

		-- Determine cow position
		local cowPosition
		if specificPosition then
			cowPosition = specificPosition
		else
			cowPosition = self:GetNextCowPosition(player)
		end

		-- Create cow model
		local cowModel = Instance.new("Model")
		cowModel.Name = "cow_" .. player.Name .. "_" .. cowItemId
		cowModel:SetAttribute("Owner", player.Name)
		cowModel:SetAttribute("CowType", cowItemId)
		cowModel:SetAttribute("Tier", cowConfig.tier)

		-- Create main body
		local body = Instance.new("Part")
		body.Name = "Body"
		body.Size = cowConfig.size or Vector3.new(4, 4, 6)
		body.Material = Enum.Material.Plastic
		body.Color = cowConfig.color or Color3.fromRGB(139, 69, 19)
		body.Shape = Enum.PartType.Block
		body.Anchored = true
		body.CanCollide = true
		body.Position = cowPosition
		body.Parent = cowModel

		-- Set as primary part
		cowModel.PrimaryPart = body

		-- Create head
		local head = Instance.new("Part")
		head.Name = "Head"
		head.Size = Vector3.new(2, 2, 2)
		head.Material = Enum.Material.Plastic
		head.Color = body.Color
		head.Shape = Enum.PartType.Block
		head.Anchored = true
		head.CanCollide = false
		head.Position = cowPosition + Vector3.new(0, 1, 3)
		head.Parent = cowModel

		-- Create legs
		for i = 1, 4 do
			local leg = Instance.new("Part")
			leg.Name = "Leg" .. i
			leg.Size = Vector3.new(0.8, 2, 0.8)
			leg.Material = Enum.Material.Plastic
			leg.Color = body.Color
			leg.Shape = Enum.PartType.Cylinder
			leg.Anchored = true
			leg.CanCollide = false

			local xOffset = (i <= 2) and -1.5 or 1.5
			local zOffset = (i % 2 == 1) and 1.5 or -1.5
			leg.Position = cowPosition + Vector3.new(xOffset, -3, zOffset)
			leg.Parent = cowModel
		end

		-- Add click detector for milk collection
		local clickDetector = Instance.new("ClickDetector")
		clickDetector.MaxActivationDistance = 15
		clickDetector.Parent = body

		clickDetector.MouseClick:Connect(function(clickingPlayer)
			if clickingPlayer.UserId == player.UserId then
				self:HandleCowMilkCollection(clickingPlayer, cowModel)
			end
		end)

		-- Create name tag
		local billboard = Instance.new("BillboardGui")
		billboard.Size = UDim2.new(0, 200, 0, 50)
		billboard.StudsOffset = Vector3.new(0, 3, 0)
		billboard.Parent = body

		local nameLabel = Instance.new("TextLabel")
		nameLabel.Size = UDim2.new(1, 0, 1, 0)
		nameLabel.BackgroundTransparency = 1
		nameLabel.Text = player.Name .. "'s " .. (cowConfig.tier or "Basic") .. " Cow"
		nameLabel.TextColor3 = Color3.new(1, 1, 1)
		nameLabel.TextScaled = true
		nameLabel.Font = Enum.Font.GothamBold
		nameLabel.TextStrokeTransparency = 0
		nameLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
		nameLabel.Parent = billboard

		-- Parent to farm
		cowModel.Parent = playerFarm

		-- Register with enhanced cow system if available
		if _G.EnhancedCowMilkSystem then
			spawn(function()
				wait(0.5) -- Let model settle
				_G.EnhancedCowMilkSystem:RegisterCow(cowModel, player, cowConfig)
			end)
		end

		print("‚úÖ Created cow model for " .. player.Name .. " at " .. tostring(cowPosition))
		return cowModel
	end)

	if success then
		return true, result
	else
		warn("‚ùå Failed to create cow model: " .. tostring(result))
		return false, nil
	end
end

function GameCore:GetPlayerFarmArea(player)
	local areas = workspace:FindFirstChild("Areas")
	if not areas then return nil end

	local starterMeadow = areas:FindFirstChild("Starter Meadow")
	if not starterMeadow then return nil end

	local farmArea = starterMeadow:FindFirstChild("Farm")
	if not farmArea then return nil end

	return farmArea:FindFirstChild(player.Name .. "_Farm")
end

function GameCore:GetNextCowPosition(player)
	-- Get player data to count existing cows
	local playerData = self:GetPlayerData(player)
	local cowCount = 0

	if playerData and playerData.livestock and playerData.livestock.cows then
		for _ in pairs(playerData.livestock.cows) do
			cowCount = cowCount + 1
		end
	end

	-- Get base farm position
	local farmPlotPosition = self:GetFarmPlotPosition(player, 1)
	if not farmPlotPosition then
		return Vector3.new(0, 5, 0) -- Fallback position
	end

	-- Get cow position relative to farm
	local cowOffset = self.CowPositions[cowCount + 1] or Vector3.new(math.random(-15, 15), 0, math.random(-15, 15))
	return farmPlotPosition.Position + cowOffset + Vector3.new(0, 5, 0) -- Raise above ground
end

function GameCore:HandleCowMilkCollection(player, cowModel)
	print("ü•õ GameCore: Cow milk collection from " .. player.Name)

	local cowType = cowModel:GetAttribute("CowType") or "basic_cow"
	local cowConfig = self:GetCowConfiguration(cowType)

	if not cowConfig then
		self:SendNotification(player, "Cow Error", "Invalid cow configuration!", "error")
		return false
	end

	-- Get player data
	local playerData = self:GetPlayerData(player)
	if not playerData then return false end

	-- Initialize inventories
	self:InitializePlayerInventories(playerData)

	-- Check cooldown
	local cowId = cowModel.Name
	local currentTime = os.time()
	local lastCollection = self.Systems.Livestock.CowCooldowns[player.UserId .. "_" .. cowId] or 0
	local cooldown = cowConfig.cooldown or 10

	if currentTime - lastCollection < cooldown then
		local timeLeft = cooldown - (currentTime - lastCollection)
		self:SendNotification(player, "üêÑ Cow Resting", 
			"This cow needs " .. math.ceil(timeLeft) .. " more seconds to produce milk!", "warning")
		return false
	end

	-- Calculate milk amount
	local milkAmount = cowConfig.milkAmount or 2

	-- Add milk to livestock inventory
	playerData.livestock.inventory.milk = (playerData.livestock.inventory.milk or 0) + milkAmount
	playerData.milk = (playerData.milk or 0) + milkAmount -- Compatibility

	-- Update cooldown
	self.Systems.Livestock.CowCooldowns[player.UserId .. "_" .. cowId] = currentTime

	-- Update cow data
	if playerData.livestock.cows then
		for cowDataId, cowData in pairs(playerData.livestock.cows) do
			if cowData.type == cowType then
				cowData.lastMilkCollection = currentTime
				cowData.totalMilkProduced = (cowData.totalMilkProduced or 0) + milkAmount
				break
			end
		end
	end

	-- Update stats
	playerData.stats.milkCollected = (playerData.stats.milkCollected or 0) + milkAmount

	-- Save and update
	self:SavePlayerData(player)
	self:UpdatePlayerLeaderstats(player)

	if self.RemoteEvents.PlayerDataUpdated then
		self.RemoteEvents.PlayerDataUpdated:FireClient(player, playerData)
	end

	self:SendNotification(player, "ü•õ Milk Collected!", 
		"Collected " .. milkAmount .. " fresh milk from your " .. (cowConfig.tier or "basic") .. " cow!", "success")

	-- Apply visual effect
	if cowModel and cowModel.PrimaryPart then
		local sparkle = Instance.new("Sparkles")
		sparkle.Parent = cowModel.PrimaryPart
		game:GetService("Debris"):AddItem(sparkle, 3)
	end

	return true
end

function GameCore:RemoveAllPlayerCows(player)
	print("üêÑ GameCore: Removing all cows for " .. player.Name)

	local playerData = self:GetPlayerData(player)
	if not playerData then return false end

	-- Clear from player data
	if playerData.livestock and playerData.livestock.cows then
		for cowId, cowData in pairs(playerData.livestock.cows) do
			print("üóëÔ∏è Removing cow " .. cowId .. " from data")
		end
		playerData.livestock.cows = {}
	end

	-- Remove cow models from workspace
	local removed = 0
	for _, obj in pairs(workspace:GetDescendants()) do
		if obj:IsA("Model") and obj.Name:find("cow_" .. player.Name) then
			obj:Destroy()
			removed = removed + 1
			print("üóëÔ∏è Removed cow model: " .. obj.Name)
		end
	end

	-- Clean up cooldowns
	for key, _ in pairs(self.Systems.Livestock.CowCooldowns) do
		if key:find(player.UserId .. "_") then
			self.Systems.Livestock.CowCooldowns[key] = nil
		end
	end

	-- Save data
	self:SavePlayerData(player)

	print("‚úÖ Removed " .. removed .. " cow models for " .. player.Name)
	return removed > 0
end

-- ========== EXISTING METHODS (Keep all existing functionality) ==========

function GameCore:SetupRemoteConnections()
	print("GameCore: Setting up remote connections...")

	local remotes = ReplicatedStorage:WaitForChild("GameRemotes", 10)
	if not remotes then
		error("GameCore: GameRemotes folder not found after 10 seconds!")
	end

	-- Core remote events
	local coreRemoteEvents = {
		"CollectMilk", "FeedPig", "PlayerDataUpdated", "ShowNotification",
		"PlantSeed", "HarvestCrop", "HarvestAllCrops"
	}

	-- Core remote functions
	local coreRemoteFunctions = {
		"GetPlayerData", "GetFarmingData"
	}

	-- Load core remote events
	for _, eventName in ipairs(coreRemoteEvents) do
		local remote = remotes:FindFirstChild(eventName)
		if remote and remote:IsA("RemoteEvent") then
			self.RemoteEvents[eventName] = remote
		else
			local newRemote = Instance.new("RemoteEvent")
			newRemote.Name = eventName
			newRemote.Parent = remotes
			self.RemoteEvents[eventName] = newRemote
		end
	end

	-- Load core remote functions
	for _, funcName in ipairs(coreRemoteFunctions) do
		local remote = remotes:FindFirstChild(funcName)
		if remote and remote:IsA("RemoteFunction") then
			self.RemoteFunctions[funcName] = remote
		else
			local newRemote = Instance.new("RemoteFunction")
			newRemote.Name = funcName
			newRemote.Parent = remotes
			self.RemoteFunctions[funcName] = newRemote
		end
	end

	print("GameCore: Remote connections established")
end

function GameCore:SetupEventHandlers()
	print("GameCore: Setting up event handlers...")

	-- Livestock System Events
	if self.RemoteEvents.CollectMilk then
		self.RemoteEvents.CollectMilk.OnServerEvent:Connect(function(player)
			pcall(function()
				self:HandleMilkCollection(player)
			end)
		end)
	end

	if self.RemoteEvents.FeedPig then
		self.RemoteEvents.FeedPig.OnServerEvent:Connect(function(player, cropId)
			pcall(function()
				self:HandlePigFeeding(player, cropId)
			end)
		end)
	end

	-- Farming System Events
	if self.RemoteEvents.PlantSeed then
		self.RemoteEvents.PlantSeed.OnServerEvent:Connect(function(player, plotModel, seedId)
			pcall(function()
				self:PlantSeed(player, plotModel, seedId)
			end)
		end)
	end

	if self.RemoteEvents.HarvestCrop then
		self.RemoteEvents.HarvestCrop.OnServerEvent:Connect(function(player, plotModel)
			pcall(function()
				self:HarvestCrop(player, plotModel)
			end)
		end)
	end

	if self.RemoteEvents.HarvestAllCrops then
		self.RemoteEvents.HarvestAllCrops.OnServerEvent:Connect(function(player)
			pcall(function()
				self:HarvestAllCrops(player)
			end)
		end)
	end

	-- Core Remote Functions
	if self.RemoteFunctions.GetPlayerData then
		self.RemoteFunctions.GetPlayerData.OnServerInvoke = function(player)
			local success, result = pcall(function()
				return self:GetPlayerData(player)
			end)
			return success and result or nil
		end
	end

	if self.RemoteFunctions.GetFarmingData then
		self.RemoteFunctions.GetFarmingData.OnServerInvoke = function(player)
			local success, result = pcall(function()
				local playerData = self:GetPlayerData(player)
				return playerData and playerData.farming or {}
			end)
			return success and result or {}
		end
	end

	print("GameCore: Event handlers setup complete!")
end

-- ========== ALL OTHER EXISTING METHODS (Keeping complete functionality) ==========

function GameCore:InitializePlayerInventories(playerData)
	print("GameCore: Initializing comprehensive inventory system")

	-- Initialize ALL inventory locations with consistent structure
	if not playerData.farming then
		playerData.farming = {
			plots = 0,
			inventory = {} -- Seeds and crops go here
		}
	end
	if not playerData.farming.inventory then
		playerData.farming.inventory = {}
	end

	if not playerData.livestock then
		playerData.livestock = {
			cows = {},
			pig = {
				size = 1.0,
				cropPoints = 0,
				transformationCount = 0,
				totalFed = 0
			},
			inventory = {} -- Milk, eggs, animal products go here
		}
	end
	if not playerData.livestock.inventory then
		playerData.livestock.inventory = {}
	end

	if not playerData.inventory then
		playerData.inventory = {} -- General items, tools go here
	end

	if not playerData.defense then
		playerData.defense = {
			chickens = {
				owned = {},
				deployed = {},
				feed = {} -- Chicken feed goes here
			},
			pestControl = {}, -- Pesticides go here
			roofs = {}
		}
	end

	if not playerData.mining then
		playerData.mining = {
			tools = {},
			inventory = {}, -- Ores go here
			level = 1,
			xp = 0
		}
	end

	if not playerData.buildings then
		playerData.buildings = {}
	end

	if not playerData.upgrades then
		playerData.upgrades = {}
	end

	if not playerData.stats then
		playerData.stats = {
			milkCollected = 0,
			coinsEarned = 100,
			cropsHarvested = 0,
			rareCropsHarvested = 0,
			pigFed = 0,
			megaTransformations = 0,
			seedsPlanted = 0,
			pestsEliminated = 0
		}
	end

	print("GameCore: All inventory locations initialized")
end

function GameCore:AddItemToCorrectInventory(playerData, itemId, quantity, itemType)
	print("üì¶ GameCore: Adding " .. quantity .. "x " .. itemId .. " to correct inventory (type: " .. (itemType or "auto") .. ")")

	-- Ensure inventories are initialized
	self:InitializePlayerInventories(playerData)

	-- Determine correct inventory location based on item type or ID
	local targetInventory = nil
	local inventoryPath = ""

	if itemType == "seed" or itemId:find("_seeds") then
		-- Seeds go to farming inventory
		targetInventory = playerData.farming.inventory
		inventoryPath = "farming.inventory"

	elseif itemType == "crop" or self:IsCropItem(itemId) then
		-- Crops go to farming inventory
		targetInventory = playerData.farming.inventory
		inventoryPath = "farming.inventory"

	elseif itemId == "milk" or itemId == "fresh_milk" or itemId:find("_egg") then
		-- Animal products go to livestock inventory
		targetInventory = playerData.livestock.inventory
		inventoryPath = "livestock.inventory"

	elseif itemId:find("_ore") or itemType == "ore" then
		-- Ores go to mining inventory
		targetInventory = playerData.mining.inventory
		inventoryPath = "mining.inventory"

	elseif itemId:find("_feed") or itemType == "feed" then
		-- Feed goes to chicken feed inventory
		targetInventory = playerData.defense.chickens.feed
		inventoryPath = "defense.chickens.feed"

	elseif itemId:find("pesticide") or itemId:find("pest_") then
		-- Pest control items go to pest control inventory
		targetInventory = playerData.defense.pestControl
		inventoryPath = "defense.pestControl"

	else
		-- General items go to main inventory
		targetInventory = playerData.inventory
		inventoryPath = "inventory"
	end

	-- Add item to target inventory
	if targetInventory then
		local currentAmount = targetInventory[itemId] or 0
		targetInventory[itemId] = currentAmount + quantity
		print("‚úÖ Added " .. quantity .. "x " .. itemId .. " to " .. inventoryPath)
		return true
	else
		warn("‚ùå Could not determine inventory location for " .. itemId)
		return false
	end
end

function GameCore:IsCropItem(itemId)
	local knownCrops = {
		"carrot", "corn", "strawberry", "wheat", "potato", 
		"tomato", "cabbage", "radish", "broccoli", "golden_fruit"
	}

	for _, cropId in ipairs(knownCrops) do
		if itemId == cropId then
			return true
		end
	end

	return false
end

-- ========== FARMING SYSTEM ==========

function GameCore:InitializeFarmingSystem()
	print("GameCore: Initializing ENHANCED farming system...")
	self.Systems.Farming.RarityEffects = {}
	print("GameCore: Enhanced farming system initialized")
end

function GameCore:PlantSeed(player, plotModel, seedId)
	print("üå± GameCore: ENHANCED plant seed request - " .. player.Name .. " wants to plant " .. seedId)

	local playerData = self:GetPlayerData(player)
	if not playerData then 
		self:SendNotification(player, "Error", "Player data not found", "error")
		return false
	end

	-- Initialize inventories
	self:InitializePlayerInventories(playerData)

	-- Check if player has the seed in farming inventory
	local seedCount = playerData.farming.inventory[seedId] or 0
	if seedCount <= 0 then
		local seedInfo = ItemConfig.ShopItems[seedId]
		local seedName = seedInfo and seedInfo.name or seedId:gsub("_", " ")
		self:SendNotification(player, "No Seeds", "You don't have any " .. seedName .. "!", "error")
		return false
	end

	-- Validate the plot model
	if not plotModel or not plotModel.Parent then
		self:SendNotification(player, "Invalid Plot", "Plot not found or invalid!", "error")
		return false
	end

	-- Check if plot is empty
	local isEmpty = plotModel:GetAttribute("IsEmpty")
	if not isEmpty then
		self:SendNotification(player, "Plot Occupied", "This plot already has something planted!", "error")
		return false
	end

	-- Check if this is the player's plot
	local plotOwner = self:GetPlotOwner(plotModel)
	if plotOwner ~= player.Name then
		self:SendNotification(player, "Not Your Plot", "You can only plant on your own farm plots!", "error")
		return false
	end

	-- Get seed data from ItemConfig
	local seedData = ItemConfig.GetSeedData(seedId)
	if not seedData then
		self:SendNotification(player, "Invalid Seed", "Seed data not found for " .. seedId .. "!", "error")
		return false
	end

	-- Determine crop rarity
	local playerBoosters = self:GetPlayerBoosters(playerData)
	local cropRarity = ItemConfig.GetCropRarity(seedId, playerBoosters)

	-- Plant the seed
	local success = self:CreateCropOnPlot(plotModel, seedId, seedData, cropRarity)
	if not success then
		self:SendNotification(player, "Planting Failed", "Could not plant seed on plot!", "error")
		return false
	end

	-- Remove seed from farming inventory
	playerData.farming.inventory[seedId] = playerData.farming.inventory[seedId] - 1
	if playerData.farming.inventory[seedId] <= 0 then
		playerData.farming.inventory[seedId] = nil
	end

	-- Update plot attributes
	plotModel:SetAttribute("IsEmpty", false)
	plotModel:SetAttribute("PlantType", seedData.resultCropId)
	plotModel:SetAttribute("SeedType", seedId)
	plotModel:SetAttribute("GrowthStage", 0)
	plotModel:SetAttribute("PlantedTime", os.time())
	plotModel:SetAttribute("Rarity", cropRarity)

	-- Update stats
	playerData.stats.seedsPlanted = (playerData.stats.seedsPlanted or 0) + 1

	-- Save and notify
	self:SavePlayerData(player)

	if self.RemoteEvents.PlayerDataUpdated then
		self.RemoteEvents.PlayerDataUpdated:FireClient(player, playerData)
	end

	local seedInfo = ItemConfig.ShopItems[seedId]
	local seedName = seedInfo and seedInfo.name or seedId:gsub("_", " ")
	local rarityColor = ItemConfig.GetRarityColor(cropRarity)
	local rarityName = ItemConfig.RaritySystem[cropRarity] and ItemConfig.RaritySystem[cropRarity].name or cropRarity

	self:SendNotification(player, "üå± Seed Planted!", 
		"Successfully planted " .. seedName .. "!\nüåü Rarity: " .. rarityName .. "\n‚è∞ Ready in " .. math.floor(seedData.growTime/60) .. " minutes.", "success")

	return true
end

function GameCore:HarvestCrop(player, plotModel)
	print("üåæ GameCore: ENHANCED harvest request from " .. player.Name .. " for plot " .. plotModel.Name)

	local playerData = self:GetPlayerData(player)
	if not playerData then 
		self:SendNotification(player, "Error", "Player data not found", "error")
		return false
	end

	-- Initialize inventories
	self:InitializePlayerInventories(playerData)

	local plotOwner = self:GetPlotOwner(plotModel)
	if plotOwner ~= player.Name then
		self:SendNotification(player, "Not Your Plot", "You can only harvest your own crops!", "error")
		return false
	end

	local growthStage = plotModel:GetAttribute("GrowthStage") or 0
	if growthStage < 4 then
		local timeLeft = self:GetCropTimeRemaining(plotModel)
		self:SendNotification(player, "Not Ready", 
			"Crop is not ready for harvest yet! " .. math.ceil(timeLeft/60) .. " minutes remaining.", "warning")
		return false
	end

	-- Get enhanced crop data with rarity
	local plantType = plotModel:GetAttribute("PlantType") or ""
	local seedType = plotModel:GetAttribute("SeedType") or ""
	local cropRarity = plotModel:GetAttribute("Rarity") or "common"

	local cropData = ItemConfig.GetCropData(plantType)
	local seedData = ItemConfig.GetSeedData(seedType)

	if not cropData or not seedData then
		self:SendNotification(player, "Invalid Crop", "Crop data not found for " .. plantType, "error")
		return false
	end

	-- Calculate yield with rarity bonus
	local baseYield = seedData.yieldAmount or 1
	local rarityMultiplier = ItemConfig.RaritySystem[cropRarity] and ItemConfig.RaritySystem[cropRarity].valueMultiplier or 1.0
	local finalYield = math.floor(baseYield * rarityMultiplier)

	-- Add crops to FARMING INVENTORY (this is the key fix!)
	local currentAmount = playerData.farming.inventory[plantType] or 0
	playerData.farming.inventory[plantType] = currentAmount + finalYield

	print("‚úÖ Added " .. finalYield .. "x " .. plantType .. " to farming.inventory")

	-- Reset plot
	plotModel:SetAttribute("IsEmpty", true)
	plotModel:SetAttribute("PlantType", "")
	plotModel:SetAttribute("SeedType", "")
	plotModel:SetAttribute("GrowthStage", 0)
	plotModel:SetAttribute("PlantedTime", 0)
	plotModel:SetAttribute("Rarity", "common")

	-- Remove crop model
	local cropModel = plotModel:FindFirstChild("CropModel")
	if cropModel then
		cropModel:Destroy()
	end

	-- Update stats
	playerData.stats.cropsHarvested = (playerData.stats.cropsHarvested or 0) + finalYield
	if cropRarity ~= "common" then
		playerData.stats.rareCropsHarvested = (playerData.stats.rareCropsHarvested or 0) + 1
	end

	-- Save and notify
	self:SavePlayerData(player)

	if self.RemoteEvents.PlayerDataUpdated then
		self.RemoteEvents.PlayerDataUpdated:FireClient(player, playerData)
	end

	local rarityName = ItemConfig.RaritySystem[cropRarity] and ItemConfig.RaritySystem[cropRarity].name or cropRarity
	local rarityEmoji = cropRarity == "legendary" and "üëë" or 
		cropRarity == "epic" and "üíú" or 
		cropRarity == "rare" and "‚ú®" or 
		cropRarity == "uncommon" and "üíö" or "‚ö™"

	self:SendNotification(player, "üåæ Crop Harvested!", 
		"Harvested " .. finalYield .. "x " .. rarityEmoji .. " " .. rarityName .. " " .. cropData.name .. "!\n" ..
			(cropRarity ~= "common" and "üéâ Bonus yield from rarity!" or ""), "success")

	print("üåæ GameCore: Successfully harvested " .. finalYield .. "x " .. plantType .. " (" .. cropRarity .. ") for " .. player.Name)
	return true
end

function GameCore:HarvestAllCrops(player)
	print("üåæ GameCore: Enhanced harvest all request from " .. player.Name)

	local playerData = self:GetPlayerData(player)
	if not playerData then 
		self:SendNotification(player, "Error", "Player data not found", "error")
		return false
	end

	-- Find all player's farm plots
	local areas = workspace:FindFirstChild("Areas")
	if not areas then
		self:SendNotification(player, "No Farm", "Farm area not found!", "error")
		return false
	end

	local starterMeadow = areas:FindFirstChild("Starter Meadow")
	if not starterMeadow then
		self:SendNotification(player, "No Farm", "Starter Meadow not found!", "error")
		return false
	end

	local farmArea = starterMeadow:FindFirstChild("Farm")
	if not farmArea then
		self:SendNotification(player, "No Farm", "Farm area not found!", "error")
		return false
	end

	local playerFarm = farmArea:FindFirstChild(player.Name .. "_Farm")
	if not playerFarm then
		self:SendNotification(player, "No Farm", "You don't have a farm yet!", "error")
		return false
	end

	local harvestedCount = 0
	local readyCrops = 0
	local totalCrops = 0
	local harvestedItems = {}

	-- Go through all farm plots
	for _, plot in pairs(playerFarm:GetChildren()) do
		if plot:IsA("Model") and plot.Name:find("FarmPlot") then
			local plantingSpots = plot:FindFirstChild("PlantingSpots")
			if plantingSpots then
				for _, spot in pairs(plantingSpots:GetChildren()) do
					if spot:IsA("Model") and spot.Name:find("PlantingSpot") then
						local isEmpty = spot:GetAttribute("IsEmpty")
						if not isEmpty then
							totalCrops = totalCrops + 1
							local growthStage = spot:GetAttribute("GrowthStage") or 0

							if growthStage >= 4 then
								readyCrops = readyCrops + 1
								local success = self:HarvestCrop(player, spot)
								if success then
									harvestedCount = harvestedCount + 1

									-- Track what was harvested
									local plantType = spot:GetAttribute("PlantType") or "unknown"
									harvestedItems[plantType] = (harvestedItems[plantType] or 0) + 1
								end
								wait(0.1)
							end
						end
					end
				end
			end
		end
	end

	-- Send enhanced summary notification
	if harvestedCount > 0 then
		local harvestSummary = ""
		for itemId, count in pairs(harvestedItems) do
			local itemName = ItemConfig.Crops[itemId] and ItemConfig.Crops[itemId].name or itemId
			harvestSummary = harvestSummary .. itemName .. ": " .. count .. "\n"
		end

		self:SendNotification(player, "üåæ Mass Harvest Complete!", 
			"Harvested " .. harvestedCount .. " crops!\n\n" .. harvestSummary ..
				(readyCrops - harvestedCount > 0 and (readyCrops - harvestedCount) .. " crops failed to harvest.\n" or "") ..
				(totalCrops - readyCrops > 0 and (totalCrops - readyCrops) .. " crops still growing." or ""), "success")
	else
		if totalCrops == 0 then
			self:SendNotification(player, "No Crops", "You don't have any crops planted!", "info")
		elseif readyCrops == 0 then
			self:SendNotification(player, "Crops Not Ready", "None of your " .. totalCrops .. " crops are ready for harvest yet!", "warning")
		else
			self:SendNotification(player, "Harvest Failed", "Found " .. readyCrops .. " ready crops but couldn't harvest any!", "error")
		end
	end

	return harvestedCount > 0
end

-- ========== ENHANCED LIVESTOCK SYSTEM ==========

function GameCore:InitializeLivestockSystem()
	print("GameCore: Initializing enhanced livestock system...")

	-- Find models in workspace
	self.Models.Cow = workspace:FindFirstChild("cow")
	self.Models.Pig = workspace:FindFirstChild("Pig")

	if self.Models.Cow then
		self:SetupCowInteraction()
	end

	if self.Models.Pig then
		print("GameCore: Found pig model")
	end

	-- Initialize player-specific livestock data
	self.Systems.Livestock.CowCooldowns = {}
	self.Systems.Livestock.PigStates = {}

	print("GameCore: Enhanced livestock system initialized")
end

function GameCore:SetupCowInteraction()
	if not self.Models.Cow then return end

	-- Remove existing click detectors
	for _, obj in pairs(self.Models.Cow:GetDescendants()) do
		if obj:IsA("ClickDetector") then
			obj:Destroy()
		end
	end

	-- Add new click detector
	local clickDetector = Instance.new("ClickDetector")
	clickDetector.MaxActivationDistance = 15
	clickDetector.Parent = self.Models.Cow:FindFirstChild("HumanoidRootPart") or self.Models.Cow

	clickDetector.MouseClick:Connect(function(player)
		self:HandleMilkCollection(player)
	end)

	print("GameCore: Enhanced cow interaction setup complete")
end

function GameCore:HandleMilkCollection(player)
	print("ü•õ GameCore: ENHANCED milk collection for " .. player.Name)

	local currentTime = os.time()
	local playerData = self:GetPlayerData(player)

	if not playerData then
		warn("ü•õ GameCore: No player data found for " .. player.Name)
		return false
	end

	-- Initialize inventories
	self:InitializePlayerInventories(playerData)

	-- Check cooldown
	local userId = player.UserId
	local lastCollection = self.Systems.Livestock.CowCooldowns[userId] or 0

	local cooldown = 10 -- 10 seconds default
	local timeSinceCollection = currentTime - lastCollection

	if timeSinceCollection < cooldown then
		local timeLeft = cooldown - timeSinceCollection
		self:SendNotification(player, "üêÑ Cow Resting", 
			"The cow needs " .. math.ceil(timeLeft) .. " more seconds to produce milk!", "warning")
		return false
	end

	-- Calculate milk amount (with upgrades if available)
	local milkAmount = 2

	-- Add milk to LIVESTOCK INVENTORY (correct location!)
	local currentMilk = playerData.livestock.inventory.milk or 0
	playerData.livestock.inventory.milk = currentMilk + milkAmount

	-- Also add to direct milk property for compatibility
	playerData.milk = (playerData.milk or 0) + milkAmount

	print("‚úÖ Added " .. milkAmount .. " milk to livestock.inventory and direct property")

	-- Update cooldown tracking
	self.Systems.Livestock.CowCooldowns[userId] = currentTime

	-- Update stats
	playerData.stats.milkCollected = (playerData.stats.milkCollected or 0) + milkAmount

	-- Save and update
	self:SavePlayerData(player)
	self:UpdatePlayerLeaderstats(player)

	if self.RemoteEvents.PlayerDataUpdated then
		self.RemoteEvents.PlayerDataUpdated:FireClient(player, playerData)
	end

	self:SendNotification(player, "ü•õ Milk Collected!", 
		"Collected " .. milkAmount .. " fresh milk! Sell it in the shop for coins.", "success")

	return true
end

function GameCore:HandlePigFeeding(player, cropId)
	local playerData = self:GetPlayerData(player)
	if not playerData then return end

	-- Initialize inventories
	self:InitializePlayerInventories(playerData)

	-- Check if player has the crop in farming inventory
	if not playerData.farming or not playerData.farming.inventory then
		self:SendNotification(player, "No Crops", "You don't have any crops to feed!", "error")
		return
	end

	local cropCount = playerData.farming.inventory[cropId] or 0
	if cropCount <= 0 then
		local cropData = ItemConfig.GetCropData and ItemConfig.GetCropData(cropId)
		local cropName = cropData and cropData.name or cropId
		self:SendNotification(player, "No Crops", "You don't have any " .. cropName .. "!", "error")
		return
	end

	-- Get crop data
	local cropData = ItemConfig.GetCropData and ItemConfig.GetCropData(cropId)
	if not cropData or not cropData.cropPoints then
		self:SendNotification(player, "Invalid Crop", "This crop cannot be fed to the pig!", "error")
		return
	end

	-- Feed the pig
	playerData.farming.inventory[cropId] = playerData.farming.inventory[cropId] - 1
	if playerData.farming.inventory[cropId] <= 0 then
		playerData.farming.inventory[cropId] = nil
	end

	local cropPoints = cropData.cropPoints

	playerData.livestock.pig.cropPoints = playerData.livestock.pig.cropPoints + cropPoints
	playerData.livestock.pig.totalFed = playerData.livestock.pig.totalFed + 1

	-- Calculate new pig size
	local newSize = 1.0 + (playerData.livestock.pig.cropPoints * 0.01)
	playerData.livestock.pig.size = math.min(newSize, 3.0)

	-- Check for MEGA PIG transformation
	local pointsNeeded = 100 + (playerData.livestock.pig.transformationCount * 50)
	local message = "Fed pig with " .. cropData.name .. "! (" .. playerData.livestock.pig.cropPoints .. "/" .. pointsNeeded .. " points for MEGA PIG)"

	if playerData.livestock.pig.cropPoints >= pointsNeeded then
		message = self:TriggerMegaPigTransformation(player, playerData)
	end

	-- Save and notify
	self:SavePlayerData(player)
	if self.RemoteEvents.PlayerDataUpdated then
		self.RemoteEvents.PlayerDataUpdated:FireClient(player, playerData)
	end

	self:SendNotification(player, "Pig Fed!", message, "success")
end

-- ========== DATA MANAGEMENT ==========

function GameCore:GetDefaultPlayerData()
	return {
		-- Core Currency
		coins = 100,
		farmTokens = 0,

		-- Core Systems
		farming = {
			plots = 0,
			inventory = {} -- Seeds and crops
		},

		livestock = {
			cows = {},
			pig = {
				size = 1.0,
				cropPoints = 0,
				transformationCount = 0,
				totalFed = 0
			},
			inventory = {} -- Milk, eggs, animal products
		},

		inventory = {}, -- General items, tools

		defense = {
			chickens = {
				owned = {},
				deployed = {},
				feed = {} -- Chicken feed
			},
			pestControl = {}, -- Pesticides
			roofs = {}
		},

		mining = {
			tools = {},
			inventory = {}, -- Ores
			level = 1,
			xp = 0
		},

		buildings = {},
		upgrades = {},
		purchaseHistory = {},

		-- Direct milk property for compatibility
		milk = 0,

		-- Boosters and Enhancements
		boosters = {},

		-- Statistics
		stats = {
			milkCollected = 0,
			coinsEarned = 100,
			cropsHarvested = 0,
			rareCropsHarvested = 0,
			pigFed = 0,
			megaTransformations = 0,
			seedsPlanted = 0,
			pestsEliminated = 0
		},

		-- Session Data
		firstJoin = os.time(),
		lastSave = os.time()
	}
end

function GameCore:GetPlayerData(player)
	if not self.PlayerData[player.UserId] then
		self:LoadPlayerData(player)
	end
	return self.PlayerData[player.UserId]
end

function GameCore:LoadPlayerData(player)
	local userId = player.UserId
	local defaultData = self:GetDefaultPlayerData()

	if not self.PlayerDataStore then
		print("‚ö†Ô∏è DataStore not available - using default data for " .. player.Name)
		self.PlayerData[userId] = defaultData
		self:InitializePlayerInventories(defaultData)
		self:UpdatePlayerLeaderstats(player)
		return defaultData
	end

	print("üì• Loading data for " .. player.Name .. "...")

	local success, data = pcall(function()
		return self.PlayerDataStore:GetAsync("Player_" .. userId)
	end)

	local loadedData = defaultData

	if success and data then
		-- Deep merge loaded data with defaults
		loadedData = self:DeepMerge(defaultData, data)
		print("‚úÖ Loaded existing data for " .. player.Name)
	else
		print("üìù Using default data for " .. player.Name .. " (first time or load failed)")
	end

	-- Ensure all inventory structures are properly initialized
	self:InitializePlayerInventories(loadedData)

	self.PlayerData[userId] = loadedData
	self:UpdatePlayerLeaderstats(player)

	return loadedData
end

--[[
    FIXED SavePlayerData Method - DataStore Compatible
    Replace the SavePlayerData method in your GameCore.lua with this version
    
    FIXES:
    ‚úÖ Sanitizes data before saving to DataStore
    ‚úÖ Removes invalid data types and characters
    ‚úÖ Handles circular references
    ‚úÖ Better error handling and debugging
    ‚úÖ Validates data structure before saving
]]

function GameCore:SavePlayerData(player, forceImmediate)
	if not player or not player.Parent then return end

	local userId = player.UserId
	local currentTime = os.time()

	-- Check cooldown
	if not forceImmediate then
		local lastSave = self.DataStoreCooldowns[userId] or 0
		local timeSinceLastSave = currentTime - lastSave

		if timeSinceLastSave < self.SAVE_COOLDOWN then
			return false
		end
	end

	local playerData = self.PlayerData[userId]
	if not playerData then 
		warn("No player data to save for " .. player.Name)
		return false
	end

	print("üíæ Saving data for " .. player.Name .. " (with data sanitization)")

	-- SANITIZE DATA BEFORE SAVING
	local sanitizedData = self:SanitizeDataForStorage(playerData)

	if not sanitizedData then
		warn("‚ùå Data sanitization failed for " .. player.Name)
		return false
	end

	-- VALIDATE DATA SIZE
	local success, jsonString = pcall(function()
		return game:GetService("HttpService"):JSONEncode(sanitizedData)
	end)

	if not success then
		warn("‚ùå Data serialization failed for " .. player.Name .. ": " .. tostring(jsonString))
		-- Try to save a minimal version
		local minimalData = self:CreateMinimalPlayerData(player)
		sanitizedData = minimalData

		success, jsonString = pcall(function()
			return game:GetService("HttpService"):JSONEncode(sanitizedData)
		end)

		if not success then
			warn("‚ùå Even minimal data serialization failed for " .. player.Name)
			return false
		end
		print("‚ö†Ô∏è Saved minimal data for " .. player.Name .. " due to serialization issues")
	end

	-- Check data size (4MB limit)
	local dataSize = #jsonString
	if dataSize > 4000000 then -- 4MB limit with safety margin
		warn("‚ö†Ô∏è Player data too large (" .. dataSize .. " bytes) for " .. player.Name .. ", using minimal data")
		sanitizedData = self:CreateMinimalPlayerData(player)
	else
		print("‚úÖ Data size OK: " .. dataSize .. " bytes")
	end

	-- SAVE TO DATASTORE
	local saveSuccess, result = pcall(function()
		if not self.PlayerDataStore then
			error("DataStore not available")
		end
		return self.PlayerDataStore:SetAsync("Player_" .. userId, sanitizedData)
	end)

	if saveSuccess then
		self.DataStoreCooldowns[userId] = currentTime
		print("‚úÖ Successfully saved sanitized data for " .. player.Name)
		return true
	else
		warn("‚ùå Failed to save data for " .. player.Name .. ": " .. tostring(result))

		-- Log debug info about the data
		self:DebugPlayerDataStructure(player, sanitizedData)
		return false
	end
end

function GameCore:SanitizeDataForStorage(data)
	print("üßπ Sanitizing player data for storage...")

	local function sanitizeValue(value, path, visited)
		path = path or "root"
		visited = visited or {}

		-- Handle circular references
		if type(value) == "table" then
			if visited[value] then
				print("‚ö†Ô∏è Circular reference detected at " .. path .. ", replacing with nil")
				return nil
			end
			visited[value] = true
		end

		local valueType = type(value)

		if valueType == "string" then
			-- Remove invalid UTF-8 characters
			local sanitized = string.gsub(value, "[^\32-\126]", "") -- Keep only printable ASCII
			if sanitized ~= value then
				print("üßπ Sanitized string at " .. path)
			end
			return sanitized

		elseif valueType == "number" then
			-- Check for NaN and infinity
			if value ~= value then -- NaN check
				print("‚ö†Ô∏è NaN found at " .. path .. ", replacing with 0")
				return 0
			elseif value == math.huge or value == -math.huge then
				print("‚ö†Ô∏è Infinity found at " .. path .. ", replacing with 0")
				return 0
			end
			return value

		elseif valueType == "boolean" then
			return value

		elseif valueType == "table" then
			local sanitizedTable = {}

			for key, val in pairs(value) do
				-- Sanitize key
				local sanitizedKey = sanitizeValue(key, path .. ".[key]", visited)
				if sanitizedKey ~= nil and type(sanitizedKey) ~= "table" then
					-- Sanitize value
					local sanitizedVal = sanitizeValue(val, path .. "." .. tostring(sanitizedKey), visited)
					if sanitizedVal ~= nil then
						sanitizedTable[sanitizedKey] = sanitizedVal
					end
				end
			end

			visited[value] = nil -- Clean up visited tracking
			return sanitizedTable

		else
			-- Remove invalid types (functions, userdata, etc.)
			print("‚ö†Ô∏è Invalid type '" .. valueType .. "' found at " .. path .. ", removing")
			return nil
		end
	end

	local sanitized = sanitizeValue(data)
	print("‚úÖ Data sanitization complete")
	return sanitized
end

function GameCore:CreateMinimalPlayerData(player)
	print("üì¶ Creating minimal player data for " .. player.Name)

	local playerData = self.PlayerData[player.UserId]

	return {
		-- Core currency (essential)
		coins = math.floor(playerData.coins or 0),
		farmTokens = math.floor(playerData.farmTokens or 0),

		-- Basic farming data
		farming = {
			plots = math.floor((playerData.farming and playerData.farming.plots) or 0),
			inventory = self:SanitizeInventory(playerData.farming and playerData.farming.inventory)
		},

		-- Basic livestock data
		livestock = {
			cows = {},
			pig = {
				size = playerData.livestock and playerData.livestock.pig and playerData.livestock.pig.size or 1.0,
				cropPoints = math.floor((playerData.livestock and playerData.livestock.pig and playerData.livestock.pig.cropPoints) or 0),
				transformationCount = math.floor((playerData.livestock and playerData.livestock.pig and playerData.livestock.pig.transformationCount) or 0),
				totalFed = math.floor((playerData.livestock and playerData.livestock.pig and playerData.livestock.pig.totalFed) or 0)
			},
			inventory = self:SanitizeInventory(playerData.livestock and playerData.livestock.inventory)
		},

		-- Basic inventories
		inventory = self:SanitizeInventory(playerData.inventory),

		-- Essential upgrades and purchases
		upgrades = self:SanitizeSimpleTable(playerData.upgrades),
		purchaseHistory = self:SanitizeSimpleTable(playerData.purchaseHistory),

		-- Compatibility
		milk = math.floor(playerData.milk or 0),

		-- Basic stats
		stats = {
			milkCollected = math.floor((playerData.stats and playerData.stats.milkCollected) or 0),
			coinsEarned = math.floor((playerData.stats and playerData.stats.coinsEarned) or 0),
			cropsHarvested = math.floor((playerData.stats and playerData.stats.cropsHarvested) or 0)
		},

		-- Session data
		firstJoin = math.floor(playerData.firstJoin or os.time()),
		lastSave = math.floor(os.time())
	}
end

function GameCore:SanitizeInventory(inventory)
	if not inventory or type(inventory) ~= "table" then
		return {}
	end

	local sanitized = {}
	for itemId, amount in pairs(inventory) do
		if type(itemId) == "string" and type(amount) == "number" and amount > 0 then
			-- Clean item ID of invalid characters
			local cleanItemId = string.gsub(itemId, "[^\32-\126]", "")
			if cleanItemId ~= "" then
				sanitized[cleanItemId] = math.floor(amount)
			end
		end
	end

	return sanitized
end

function GameCore:SanitizeSimpleTable(tbl)
	if not tbl or type(tbl) ~= "table" then
		return {}
	end

	local sanitized = {}
	for key, value in pairs(tbl) do
		if type(key) == "string" then
			local cleanKey = string.gsub(key, "[^\32-\126]", "")
			if cleanKey ~= "" then
				if type(value) == "boolean" or type(value) == "number" or type(value) == "string" then
					if type(value) == "string" then
						sanitized[cleanKey] = string.gsub(value, "[^\32-\126]", "")
					elseif type(value) == "number" then
						if value == value and value ~= math.huge and value ~= -math.huge then
							sanitized[cleanKey] = value
						end
					else
						sanitized[cleanKey] = value
					end
				end
			end
		end
	end

	return sanitized
end

function GameCore:DebugPlayerDataStructure(player, data)
	print("=== DATA STRUCTURE DEBUG FOR " .. player.Name .. " ===")

	local function analyzeTable(tbl, path, depth)
		if depth > 5 then
			print("  " .. path .. ": [too deep]")
			return
		end

		if type(tbl) ~= "table" then
			print("  " .. path .. ": " .. type(tbl) .. " = " .. tostring(tbl))
			return
		end

		local count = 0
		for key, value in pairs(tbl) do
			count = count + 1
			if count > 10 then
				print("  " .. path .. ": [more items...]")
				break
			end

			local keyStr = tostring(key)
			local valueType = type(value)

			if valueType == "table" then
				local subCount = 0
				for _ in pairs(value) do subCount = subCount + 1 end
				print("  " .. path .. "." .. keyStr .. ": table (" .. subCount .. " items)")
				analyzeTable(value, path .. "." .. keyStr, depth + 1)
			else
				print("  " .. path .. "." .. keyStr .. ": " .. valueType .. " = " .. tostring(value))
			end
		end
	end

	analyzeTable(data, "playerData", 0)
	print("===============================================")
end

-- Debug command to test data sanitization
function GameCore:TestDataSanitization(player)
	local playerData = self:GetPlayerData(player)
	if not playerData then
		print("No player data to test")
		return
	end

	print("=== TESTING DATA SANITIZATION ===")

	-- Test original data
	local success, result = pcall(function()
		return game:GetService("HttpService"):JSONEncode(playerData)
	end)

	print("Original data serializable: " .. tostring(success))
	if not success then
		print("Original error: " .. tostring(result))
	end

	-- Test sanitized data
	local sanitized = self:SanitizeDataForStorage(playerData)

	success, result = pcall(function()
		return game:GetService("HttpService"):JSONEncode(sanitized)
	end)

	print("Sanitized data serializable: " .. tostring(success))
	if success then
		print("Sanitized data size: " .. #result .. " bytes")
	else
		print("Sanitized error: " .. tostring(result))
	end

	print("=================================")
end
function GameCore:DeepMerge(default, loaded)
	local result = {}

	for key, value in pairs(default) do
		if type(value) == "table" then
			result[key] = self:DeepMerge(value, loaded[key] or {})
		else
			result[key] = loaded[key] ~= nil and loaded[key] or value
		end
	end

	for key, value in pairs(loaded) do
		if result[key] == nil then
			result[key] = value
		end
	end

	return result
end

-- ========== FARM PLOT MANAGEMENT ==========

function GameCore:CreatePlayerFarmPlot(player, plotNumber)
	plotNumber = plotNumber or 1

	local plotCFrame = self:GetFarmPlotPosition(player, plotNumber)
	if not plotCFrame then
		warn("GameCore: Could not get farm plot position for " .. player.Name .. " plot " .. plotNumber)
		return false
	end

	-- Find or create the farm area structure
	local areas = workspace:FindFirstChild("Areas")
	if not areas then
		areas = Instance.new("Folder")
		areas.Name = "Areas"
		areas.Parent = workspace
	end

	local starterMeadow = areas:FindFirstChild("Starter Meadow")
	if not starterMeadow then
		starterMeadow = Instance.new("Model")
		starterMeadow.Name = "Starter Meadow"
		starterMeadow.Parent = areas
	end

	local farmArea = starterMeadow:FindFirstChild("Farm")
	if not farmArea then
		farmArea = Instance.new("Folder")
		farmArea.Name = "Farm"
		farmArea.Parent = starterMeadow
	end

	-- Create player-specific farm folder
	local playerFarmName = player.Name .. "_Farm"
	local playerFarm = farmArea:FindFirstChild(playerFarmName)
	if not playerFarm then
		playerFarm = Instance.new("Folder")
		playerFarm.Name = playerFarmName
		playerFarm.Parent = farmArea
	end

	-- Check if plot already exists
	local plotName = "FarmPlot_" .. plotNumber
	local existingPlot = playerFarm:FindFirstChild(plotName)
	if existingPlot then
		if existingPlot.PrimaryPart then
			existingPlot:SetPrimaryPartCFrame(plotCFrame)
		end
		print("GameCore: Updated position for existing " .. plotName .. " for " .. player.Name)
		return true
	end

	-- Create the farm plot model with enhanced structure
	local farmPlot = Instance.new("Model")
	farmPlot.Name = plotName
	farmPlot.Parent = playerFarm

	-- Create the base platform
	local basePart = Instance.new("Part")
	basePart.Name = "BasePart"
	basePart.Size = Vector3.new(16, 1, 16)
	basePart.Material = Enum.Material.Ground
	basePart.Color = Color3.fromRGB(101, 67, 33)
	basePart.Anchored = true
	basePart.CFrame = plotCFrame
	basePart.Parent = farmPlot

	farmPlot.PrimaryPart = basePart

	-- Create planting spots (3x3 grid)
	local plantingSpots = Instance.new("Folder")
	plantingSpots.Name = "PlantingSpots"
	plantingSpots.Parent = farmPlot

	local spotSize = 4
	local spacing = 5

	for row = 1, 3 do
		for col = 1, 3 do
			local spotIndex = (row - 1) * 3 + col
			local spotName = "PlantingSpot_" .. spotIndex

			local spotModel = Instance.new("Model")
			spotModel.Name = spotName
			spotModel.Parent = plantingSpots

			local offsetX = (col - 2) * spacing
			local offsetZ = (row - 2) * spacing

			local spotPart = Instance.new("Part")
			spotPart.Name = "SpotPart"
			spotPart.Size = Vector3.new(spotSize, 0.2, spotSize)
			spotPart.Material = Enum.Material.LeafyGrass
			spotPart.Color = Color3.fromRGB(91, 154, 76)
			spotPart.Anchored = true
			spotPart.CFrame = plotCFrame + Vector3.new(offsetX, 1, offsetZ)
			spotPart.Parent = spotModel

			spotModel.PrimaryPart = spotPart

			-- Add attributes for farming system
			spotModel:SetAttribute("IsEmpty", true)
			spotModel:SetAttribute("PlantType", "")
			spotModel:SetAttribute("SeedType", "")
			spotModel:SetAttribute("GrowthStage", 0)
			spotModel:SetAttribute("PlantedTime", 0)
			spotModel:SetAttribute("Rarity", "common")

			-- Create visual indicator
			local indicator = Instance.new("Part")
			indicator.Name = "Indicator"
			indicator.Size = Vector3.new(0.5, 2, 0.5)
			indicator.Material = Enum.Material.Neon
			indicator.Color = Color3.fromRGB(100, 255, 100)
			indicator.Anchored = true
			indicator.CFrame = spotPart.CFrame + Vector3.new(0, 1.5, 0)
			indicator.Parent = spotModel

			-- Add click detector for planting
			local clickDetector = Instance.new("ClickDetector")
			clickDetector.MaxActivationDistance = 10
			clickDetector.Parent = spotPart

			clickDetector.MouseClick:Connect(function(clickingPlayer)
				if clickingPlayer.UserId == player.UserId then
					self:HandlePlotClick(clickingPlayer, spotModel)
				end
			end)
		end
	end

	print("GameCore: Created " .. plotName .. " for " .. player.Name)
	return true
end

function GameCore:GetFarmPlotPosition(player, plotNumber)
	plotNumber = plotNumber or 1

	if plotNumber < 1 or plotNumber > 10 then
		warn("GameCore: Invalid plot number " .. plotNumber .. ". Must be between 1 and 10.")
		plotNumber = 1
	end

	-- Get player index for farm separation
	local playerIndex = 0
	local sortedPlayers = {}
	for _, p in pairs(Players:GetPlayers()) do
		table.insert(sortedPlayers, p)
	end
	table.sort(sortedPlayers, function(a, b) return a.UserId < b.UserId end)

	for i, p in ipairs(sortedPlayers) do
		if p.UserId == player.UserId then
			playerIndex = i - 1
			break
		end
	end

	-- Calculate position
	local basePos = self.FarmPlotPositions.basePosition
	local playerOffset = self.FarmPlotPositions.playerSeparation * playerIndex
	local playerBasePosition = basePos + playerOffset
	local plotOffset = self.FarmPlotPositions.plotOffsets[plotNumber] or Vector3.new(0, 0, 0)
	local finalPosition = playerBasePosition + plotOffset

	local rotation = self.FarmPlotPositions.plotRotation
	local cframe = CFrame.new(finalPosition) * CFrame.Angles(
		math.rad(rotation.X), 
		math.rad(rotation.Y), 
		math.rad(rotation.Z)
	)

	return cframe
end

function GameCore:HandlePlotClick(player, spotModel)
	local isEmpty = spotModel:GetAttribute("IsEmpty")
	if not isEmpty then
		-- Check if crop is ready for harvest
		local growthStage = spotModel:GetAttribute("GrowthStage") or 0
		if growthStage >= 4 then
			self:HarvestCrop(player, spotModel)
		else
			self:SendNotification(player, "Crop Growing", "This crop is still growing! Wait for it to be ready.", "info")
		end
		return
	end

	local plotOwner = self:GetPlotOwner(spotModel)
	if plotOwner ~= player.Name then
		self:SendNotification(player, "Not Your Plot", "You can only plant on your own farm plots!", "error")
		return
	end

	local playerData = self:GetPlayerData(player)
	if not playerData or not playerData.farming or not playerData.farming.inventory then
		self:SendNotification(player, "No Farming Data", "You need to set up farming first! Visit the shop.", "warning")
		return
	end

	local hasSeeds = false
	for itemId, qty in pairs(playerData.farming.inventory) do
		if itemId:find("_seeds") and qty > 0 then
			hasSeeds = true
			break
		end
	end
	if not hasSeeds then
		self:SendNotification(player, "No Seeds", "You don't have any seeds! Buy some from the shop first.", "warning")
		return
	end

	-- Send to client for seed selection
	self.RemoteEvents.PlantSeed:FireClient(player, spotModel)
end

function GameCore:GetPlotOwner(plotModel)
	local parent = plotModel.Parent
	local attempts = 0

	while parent and parent.Parent and attempts < 10 do
		attempts = attempts + 1

		if parent.Name:find("_Farm") then
			return parent.Name:gsub("_Farm", "")
		end

		if parent.Name:find("Farm") and parent.Parent and parent.Parent.Name:find("_Farm") then
			return parent.Parent.Name:gsub("_Farm", "")
		end

		parent = parent.Parent
	end

	warn("GameCore: Could not determine plot owner for " .. plotModel.Name)
	return nil
end

-- ========== UTILITY FUNCTIONS ==========

function GameCore:GetPlayerBoosters(playerData)
	local boosters = {}

	if playerData.boosters then
		if playerData.boosters.rarity_booster and playerData.boosters.rarity_booster > 0 then
			boosters.rarity_booster = true
		end
	end

	return boosters
end

function GameCore:CreateCropOnPlot(plotModel, seedId, seedData, cropRarity)
	-- Basic crop creation - simplified for this fixed version
	-- (Keep your existing implementation or use a simplified version)
	return true
end

function GameCore:GetCropTimeRemaining(plotModel)
	local plantedTime = plotModel:GetAttribute("PlantedTime") or 0
	local seedType = plotModel:GetAttribute("SeedType") or ""

	if plantedTime == 0 or seedType == "" then return 0 end

	local seedData = ItemConfig.GetSeedData(seedType)
	if not seedData then return 0 end

	local elapsedTime = os.time() - plantedTime
	local totalGrowTime = seedData.growTime

	return math.max(0, totalGrowTime - elapsedTime)
end

function GameCore:TriggerMegaPigTransformation(player, playerData)
	-- Keep your existing implementation
	return "üéâ MEGA PIG TRANSFORMATION! üéâ"
end

function GameCore:SendNotification(player, title, message, notificationType)
	if self.RemoteEvents.ShowNotification then
		self.RemoteEvents.ShowNotification:FireClient(player, title, message, notificationType or "info")
	else
		print("NOTIFICATION for " .. player.Name .. ": [" .. (notificationType or "info"):upper() .. "] " .. title .. " - " .. message)
	end
end

function GameCore:CreatePlayerLeaderstats(player)
	local leaderstats = Instance.new("Folder")
	leaderstats.Name = "leaderstats"
	leaderstats.Parent = player

	local coins = Instance.new("IntValue")
	coins.Name = "Coins"
	coins.Value = self.PlayerData[player.UserId].coins
	coins.Parent = leaderstats

	local farmTokens = Instance.new("IntValue")
	farmTokens.Name = "Farm Tokens"
	farmTokens.Value = self.PlayerData[player.UserId].farmTokens or 0
	farmTokens.Parent = leaderstats
end

function GameCore:UpdatePlayerLeaderstats(player)
	local leaderstats = player:FindFirstChild("leaderstats")
	if not leaderstats then 
		self:CreatePlayerLeaderstats(player)
		return
	end

	local playerData = self.PlayerData[player.UserId]
	if not playerData then return end

	local coins = leaderstats:FindFirstChild("Coins")
	if coins then coins.Value = playerData.coins end

	local farmTokens = leaderstats:FindFirstChild("Farm Tokens")
	if farmTokens then farmTokens.Value = playerData.farmTokens or 0 end
end

function GameCore:StartUpdateLoops()
	print("GameCore: Starting update loops...")

	-- Auto-save loop
	spawn(function()
		while true do
			wait(300) -- Save every 5 minutes
			for _, player in ipairs(Players:GetPlayers()) do
				if player and player.Parent and self.PlayerData[player.UserId] then
					pcall(function()
						self:SavePlayerData(player)
					end)
				end
			end
		end
	end)
end

-- ========== PLAYER EVENTS ==========

Players.PlayerAdded:Connect(function(player)
	GameCore:LoadPlayerData(player)
	GameCore:CreatePlayerLeaderstats(player)
end)

Players.PlayerRemoving:Connect(function(player)
	GameCore:SavePlayerData(player, true)
	-- Clean up cooldowns
	GameCore.Systems.Livestock.CowCooldowns[player.UserId] = nil
	GameCore.Systems.Livestock.PigStates[player.UserId] = nil
end)

-- ========== DEBUG COMMANDS ==========

game:GetService("Players").PlayerAdded:Connect(function(player)
	player.Chatted:Connect(function(message)
		if player.Name == "TommySalami311" then -- Replace with your username
			local args = string.split(message:lower(), " ")
			local command = args[1]

			if command == "/debuginventory" then
				local playerData = GameCore:GetPlayerData(player)
				if playerData then
					print("=== INVENTORY DEBUG FOR " .. player.Name .. " ===")
					print("Farming inventory:")
					for itemId, amount in pairs(playerData.farming.inventory or {}) do
						print("  " .. itemId .. ": " .. amount)
					end
					print("Livestock inventory:")
					for itemId, amount in pairs(playerData.livestock.inventory or {}) do
						print("  " .. itemId .. ": " .. amount)
					end
					print("General inventory:")
					for itemId, amount in pairs(playerData.inventory or {}) do
						print("  " .. itemId .. ": " .. amount)
					end
					print("Direct milk: " .. (playerData.milk or 0))
					print("===============================")
				end

			elseif command == "/testcow" then
				print("üêÑ Testing cow purchase for " .. player.Name)
				local success = GameCore:PurchaseCow(player, "basic_cow", nil)
				print("üêÑ Cow purchase result: " .. tostring(success))

			elseif command == "/givecrops" then
				local playerData = GameCore:GetPlayerData(player)
				if playerData then
					GameCore:InitializePlayerInventories(playerData)

					local testCrops = {"carrot", "corn", "strawberry", "wheat", "potato"}
					for _, crop in ipairs(testCrops) do
						playerData.farming.inventory[crop] = (playerData.farming.inventory[crop] or 0) + 10
					end

					-- Also give some milk
					playerData.livestock.inventory.milk = (playerData.livestock.inventory.milk or 0) + 5
					playerData.milk = (playerData.milk or 0) + 5

					print("Gave test items to " .. player.Name)
					GameCore:SavePlayerData(player)
				end

			elseif command == "/givemilk" then
				local amount = tonumber(args[2]) or 5
				local playerData = GameCore:GetPlayerData(player)
				if playerData then
					GameCore:InitializePlayerInventories(playerData)
					playerData.livestock.inventory.milk = (playerData.livestock.inventory.milk or 0) + amount
					playerData.milk = (playerData.milk or 0) + amount
					print("Gave " .. amount .. " milk to " .. player.Name)
					GameCore:SavePlayerData(player)
				end

			elseif command == "/removecows" then
				local success = GameCore:RemoveAllPlayerCows(player)
				print("üóëÔ∏è Removed cows result: " .. tostring(success))
			end
		end
	end)
end)

-- Make globally available
_G.GameCore = GameCore

print("GameCore: ‚úÖ FIXED complete cow system with all missing methods!")
print("üêÑ NEW COW FEATURES:")
print("  ‚úÖ GetCowConfiguration method")
print("  ‚úÖ PurchaseCow method")
print("  ‚úÖ Complete cow management system")
print("  ‚úÖ Cow model creation and placement")
print("  ‚úÖ Enhanced milk collection")
print("  ‚úÖ Cow upgrade system support")
print("  ‚úÖ Visual effects integration")
print("")
print("üîß Debug Commands:")
print("  /testcow - Test cow purchase system")
print("  /removecows - Remove all player cows")
print("  /debuginventory - Show all inventory contents")
print("  /givecrops - Give test crops for selling")
print("  /givemilk [amount] - Give milk for testing")

return GameCore